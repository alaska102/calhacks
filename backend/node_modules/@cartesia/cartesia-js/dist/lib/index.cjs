"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/lib/index.ts
var lib_exports = {};
__export(lib_exports, {
  Cartesia: () => Cartesia
});
module.exports = __toCommonJS(lib_exports);

// src/lib/client.ts
var import_cross_fetch = __toESM(require("cross-fetch"), 1);

// src/lib/constants.ts
var BASE_URL = "https://api.cartesia.ai";
var CARTESIA_VERSION = "2024-06-10";
var constructApiUrl = (baseUrl, path, { websocket = false } = {}) => {
  const url = new URL(path, baseUrl);
  if (websocket) {
    url.protocol = baseUrl.replace(/^http/, "ws");
  }
  return url;
};

// src/lib/client.ts
var Client = class {
  constructor(options = {}) {
    const apiKey = options.apiKey || process.env.CARTESIA_API_KEY;
    if (!apiKey) {
      throw new Error("Missing Cartesia API key.");
    }
    this.apiKey = typeof apiKey === "function" ? apiKey : () => __async(this, null, function* () {
      return apiKey;
    });
    this.baseUrl = options.baseUrl || BASE_URL;
  }
  _fetch(_0) {
    return __async(this, arguments, function* (path, options = {}) {
      const url = constructApiUrl(this.baseUrl, path);
      const headers = new Headers(options.headers);
      headers.set("X-API-Key", yield this.apiKey());
      headers.set("Cartesia-Version", CARTESIA_VERSION);
      return (0, import_cross_fetch.default)(url.toString(), __spreadProps(__spreadValues({}, options), {
        headers
      }));
    });
  }
};

// src/tts/websocket.ts
var import_emittery2 = __toESM(require("emittery"), 1);
var import_human_id = require("human-id");
var import_partysocket = require("partysocket");

// src/tts/source.ts
var import_emittery = __toESM(require("emittery"), 1);
var ENCODING_MAP = {
  pcm_f32le: { arrayType: Float32Array, bytesPerElement: 4 },
  pcm_s16le: { arrayType: Int16Array, bytesPerElement: 2 },
  pcm_alaw: { arrayType: Uint8Array, bytesPerElement: 1 },
  pcm_mulaw: { arrayType: Uint8Array, bytesPerElement: 1 }
};
var _emitter, _buffer, _readIndex, _writeIndex, _closed, _sampleRate, _encoding, _container, _createBuffer, createBuffer_fn;
var Source = class {
  /**
   * Create a new Source.
   *
   * @param options - Options for the Source.
   * @param options.sampleRate - The sample rate of the audio.
   */
  constructor({
    sampleRate,
    encoding,
    container
  }) {
    /**
     * Create a new buffer for the source.
     *
     * @param size - The size of the buffer to create.
     * @returns The new buffer as a TypedArray based on the encoding.
     */
    __privateAdd(this, _createBuffer);
    __privateAdd(this, _emitter, new import_emittery.default());
    __privateAdd(this, _buffer, void 0);
    __privateAdd(this, _readIndex, 0);
    __privateAdd(this, _writeIndex, 0);
    __privateAdd(this, _closed, false);
    __privateAdd(this, _sampleRate, void 0);
    __privateAdd(this, _encoding, void 0);
    __privateAdd(this, _container, void 0);
    this.on = __privateGet(this, _emitter).on.bind(__privateGet(this, _emitter));
    this.once = __privateGet(this, _emitter).once.bind(__privateGet(this, _emitter));
    this.events = __privateGet(this, _emitter).events.bind(__privateGet(this, _emitter));
    this.off = __privateGet(this, _emitter).off.bind(__privateGet(this, _emitter));
    __privateSet(this, _sampleRate, sampleRate);
    __privateSet(this, _encoding, encoding);
    __privateSet(this, _container, container);
    __privateSet(this, _buffer, __privateMethod(this, _createBuffer, createBuffer_fn).call(this, 1024));
  }
  get sampleRate() {
    return __privateGet(this, _sampleRate);
  }
  get encoding() {
    return __privateGet(this, _encoding);
  }
  get container() {
    return __privateGet(this, _container);
  }
  /**
   * Append audio to the buffer.
   *
   * @param src The audio to append.
   */
  enqueue(src) {
    return __async(this, null, function* () {
      const requiredCapacity = __privateGet(this, _writeIndex) + src.length;
      if (requiredCapacity > __privateGet(this, _buffer).length) {
        let newCapacity = __privateGet(this, _buffer).length;
        while (newCapacity < requiredCapacity) {
          newCapacity *= 2;
        }
        const newBuffer = __privateMethod(this, _createBuffer, createBuffer_fn).call(this, newCapacity);
        newBuffer.set(__privateGet(this, _buffer));
        __privateSet(this, _buffer, newBuffer);
      }
      __privateGet(this, _buffer).set(src, __privateGet(this, _writeIndex));
      __privateSet(this, _writeIndex, __privateGet(this, _writeIndex) + src.length);
      yield __privateGet(this, _emitter).emit("enqueue");
    });
  }
  /**
   * Read audio from the buffer.
   *
   * @param dst The buffer to read the audio into.
   * @returns The number of samples read. If the source is closed, this will be
   * less than the length of the provided buffer.
   */
  read(dst) {
    return __async(this, null, function* () {
      const targetReadIndex = __privateGet(this, _readIndex) + dst.length;
      while (!__privateGet(this, _closed) && targetReadIndex > __privateGet(this, _writeIndex)) {
        yield __privateGet(this, _emitter).emit("wait");
        yield Promise.race([
          __privateGet(this, _emitter).once("enqueue"),
          __privateGet(this, _emitter).once("close")
        ]);
        yield __privateGet(this, _emitter).emit("read");
      }
      const read = Math.min(dst.length, __privateGet(this, _writeIndex) - __privateGet(this, _readIndex));
      dst.set(__privateGet(this, _buffer).subarray(__privateGet(this, _readIndex), __privateGet(this, _readIndex) + read));
      __privateSet(this, _readIndex, __privateGet(this, _readIndex) + read);
      return read;
    });
  }
  /**
   * Seek in the buffer.
   *
   * @param offset The offset to seek to.
   * @param whence The position to seek from.
   * @returns The new position in the buffer.
   * @throws {Error} If the seek is invalid.
   */
  seek(offset, whence) {
    return __async(this, null, function* () {
      let position = __privateGet(this, _readIndex);
      switch (whence) {
        case "start":
          position = offset;
          break;
        case "current":
          position += offset;
          break;
        case "end":
          position = __privateGet(this, _writeIndex) + offset;
          break;
        default:
          throw new Error(`Invalid seek mode: ${whence}`);
      }
      if (position < 0 || position > __privateGet(this, _writeIndex)) {
        throw new Error("Seek out of bounds");
      }
      __privateSet(this, _readIndex, position);
      return position;
    });
  }
  /**
   * Get the number of samples in a given duration.
   *
   * @param durationSecs The duration in seconds.
   * @returns The number of samples.
   */
  durationToSampleCount(durationSecs) {
    return Math.trunc(durationSecs * __privateGet(this, _sampleRate));
  }
  get buffer() {
    return __privateGet(this, _buffer);
  }
  get readIndex() {
    return __privateGet(this, _readIndex);
  }
  get writeIndex() {
    return __privateGet(this, _writeIndex);
  }
  /**
   * Close the source. This signals that no more audio will be enqueued.
   *
   * This will emit a "close" event.
   *
   * @returns A promise that resolves when the source is closed.
   */
  close() {
    return __async(this, null, function* () {
      __privateSet(this, _closed, true);
      yield __privateGet(this, _emitter).emit("close");
      __privateGet(this, _emitter).clearListeners();
    });
  }
};
_emitter = new WeakMap();
_buffer = new WeakMap();
_readIndex = new WeakMap();
_writeIndex = new WeakMap();
_closed = new WeakMap();
_sampleRate = new WeakMap();
_encoding = new WeakMap();
_container = new WeakMap();
_createBuffer = new WeakSet();
createBuffer_fn = function(size) {
  const { arrayType: ArrayType } = ENCODING_MAP[__privateGet(this, _encoding)];
  return new ArrayType(size);
};

// src/tts/utils.ts
var import_base64_js = __toESM(require("base64-js"), 1);
function base64ToArray(b64, encoding) {
  const byteArrays = filterSentinel(b64).map((b) => import_base64_js.default.toByteArray(b));
  const { arrayType: ArrayType, bytesPerElement } = ENCODING_MAP[encoding];
  const totalLength = byteArrays.reduce(
    (acc, arr) => acc + arr.length / bytesPerElement,
    0
  );
  const result = new ArrayType(totalLength);
  let offset = 0;
  for (const arr of byteArrays) {
    const floats = new ArrayType(arr.buffer);
    result.set(floats, offset);
    offset += floats.length;
  }
  return result;
}
function createMessageHandlerForContextId(contextId, handler) {
  return (event) => {
    if (typeof event.data !== "string") {
      return;
    }
    const message = JSON.parse(event.data);
    if (message.context_id !== contextId) {
      return;
    }
    let chunk;
    if (message.done) {
      chunk = getSentinel();
    } else if (message.type === "chunk") {
      chunk = message.data;
    }
    handler({ chunk, message: event.data, data: message });
  };
}
function getSentinel() {
  return null;
}
function isSentinel(x) {
  return x === getSentinel();
}
function filterSentinel(collection) {
  return collection.filter(
    (x) => !isSentinel(x)
  );
}
function getEmitteryCallbacks(emitter) {
  return {
    on: emitter.on.bind(emitter),
    off: emitter.off.bind(emitter),
    once: emitter.once.bind(emitter),
    events: emitter.events.bind(emitter)
  };
}

// src/tts/websocket.ts
var _isConnected, _sampleRate2, _container2, _encoding2, _generateId, generateId_fn;
var WebSocket = class extends Client {
  /**
   * Create a new WebSocket client.
   *
   * @param args - Arguments to pass to the Client constructor.
   */
  constructor({ sampleRate, container, encoding }, ...args) {
    super(...args);
    /**
     * Generate a unique ID suitable for a streaming context.
     *
     * Not suitable for security purposes or as a primary key, since
     * it lacks the amount of entropy required for those use cases.
     *
     * @returns A unique ID.
     */
    __privateAdd(this, _generateId);
    __privateAdd(this, _isConnected, false);
    __privateAdd(this, _sampleRate2, void 0);
    __privateAdd(this, _container2, void 0);
    __privateAdd(this, _encoding2, void 0);
    __privateSet(this, _sampleRate2, sampleRate);
    __privateSet(this, _container2, container != null ? container : "raw");
    __privateSet(this, _encoding2, encoding != null ? encoding : "pcm_f32le");
  }
  /**
   * Send a message over the WebSocket to start a stream.
   *
   * @param inputs - Generation parameters. Defined in the StreamRequest type.
   * @param options - Options for the stream.
   * @param options.timeout - The maximum time to wait for a chunk before cancelling the stream.
   *                          If set to `0`, the stream will not time out.
   * @returns A Source object that can be passed to a Player to play the audio.
   * @returns An Emittery instance that emits messages from the WebSocket.
   * @returns An abort function that can be called to cancel the stream.
   */
  send(inputs, { timeout = 0 } = {}) {
    var _a, _b, _c, _d;
    if (!__privateGet(this, _isConnected)) {
      throw new Error("Not connected to WebSocket. Call .connect() first.");
    }
    if (!inputs.context_id) {
      inputs.context_id = __privateMethod(this, _generateId, generateId_fn).call(this);
    }
    if (!inputs.output_format) {
      inputs.output_format = {
        container: __privateGet(this, _container2),
        encoding: __privateGet(this, _encoding2),
        sample_rate: __privateGet(this, _sampleRate2)
      };
    }
    (_a = this.socket) == null ? void 0 : _a.send(
      JSON.stringify(__spreadValues({}, inputs))
    );
    const emitter = new import_emittery2.default();
    const source = new Source({
      sampleRate: __privateGet(this, _sampleRate2),
      encoding: __privateGet(this, _encoding2),
      container: __privateGet(this, _container2)
    });
    const streamCompleteController = new AbortController();
    let timeoutId = null;
    if (timeout > 0) {
      timeoutId = setTimeout(streamCompleteController.abort, timeout);
    }
    const handleMessage = createMessageHandlerForContextId(
      inputs.context_id,
      (_0) => __async(this, [_0], function* ({ chunk, message, data }) {
        emitter.emit("message", message);
        if (data.type === "timestamps") {
          emitter.emit("timestamps", data.word_timestamps);
          return;
        }
        if (isSentinel(chunk)) {
          yield source.close();
          streamCompleteController.abort();
          return;
        }
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(streamCompleteController.abort, timeout);
        }
        if (!chunk) {
          return;
        }
        yield source.enqueue(base64ToArray([chunk], __privateGet(this, _encoding2)));
      })
    );
    (_b = this.socket) == null ? void 0 : _b.addEventListener("message", handleMessage, {
      signal: streamCompleteController.signal
    });
    (_c = this.socket) == null ? void 0 : _c.addEventListener(
      "close",
      () => {
        streamCompleteController.abort();
      },
      {
        once: true
      }
    );
    (_d = this.socket) == null ? void 0 : _d.addEventListener(
      "error",
      () => {
        streamCompleteController.abort();
      },
      {
        once: true
      }
    );
    streamCompleteController.signal.addEventListener("abort", () => {
      source.close();
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    });
    return __spreadProps(__spreadValues({
      source
    }, getEmitteryCallbacks(emitter)), {
      stop: streamCompleteController.abort.bind(streamCompleteController)
    });
  }
  /**
   * Continue a stream.
   *
   * @param inputs - Generation parameters. Defined in the StreamRequest type, but must include a `context_id` field. `continue` is set to true by default.
   */
  continue(inputs) {
    var _a;
    if (!__privateGet(this, _isConnected)) {
      throw new Error("Not connected to WebSocket. Call .connect() first.");
    }
    if (!inputs.context_id) {
      throw new Error("context_id is required to continue a context.");
    }
    if (!inputs.output_format) {
      inputs.output_format = {
        container: __privateGet(this, _container2),
        encoding: __privateGet(this, _encoding2),
        sample_rate: __privateGet(this, _sampleRate2)
      };
    }
    (_a = this.socket) == null ? void 0 : _a.send(
      JSON.stringify(__spreadValues({
        continue: true
      }, inputs))
    );
  }
  /**
   * Authenticate and connect to a Cartesia streaming WebSocket.
   *
   * @returns A promise that resolves when the WebSocket is connected.
   * @throws {Error} If the WebSocket fails to connect.
   */
  connect() {
    return __async(this, null, function* () {
      const emitter = new import_emittery2.default();
      this.socket = new import_partysocket.WebSocket(() => __async(this, null, function* () {
        const url = constructApiUrl(this.baseUrl, "/tts/websocket", {
          websocket: true
        });
        url.searchParams.set("api_key", yield this.apiKey());
        url.searchParams.set("cartesia_version", CARTESIA_VERSION);
        return url.toString();
      }));
      this.socket.binaryType = "arraybuffer";
      this.socket.onopen = () => {
        __privateSet(this, _isConnected, true);
        emitter.emit("open");
      };
      this.socket.onclose = () => {
        __privateSet(this, _isConnected, false);
        emitter.emit("close");
      };
      return new Promise(
        (resolve, reject) => {
          var _a, _b, _c;
          (_a = this.socket) == null ? void 0 : _a.addEventListener(
            "open",
            () => {
              resolve(getEmitteryCallbacks(emitter));
            },
            {
              once: true
            }
          );
          const aborter = new AbortController();
          (_b = this.socket) == null ? void 0 : _b.addEventListener(
            "error",
            () => {
              aborter.abort();
              reject(new Error("WebSocket failed to connect."));
            },
            {
              signal: aborter.signal
            }
          );
          (_c = this.socket) == null ? void 0 : _c.addEventListener(
            "close",
            () => {
              aborter.abort();
              reject(new Error("WebSocket closed before it could connect."));
            },
            {
              signal: aborter.signal
            }
          );
        }
      );
    });
  }
  /**
   * Disconnect from the Cartesia streaming WebSocket.
   */
  disconnect() {
    var _a;
    (_a = this.socket) == null ? void 0 : _a.close();
  }
};
_isConnected = new WeakMap();
_sampleRate2 = new WeakMap();
_container2 = new WeakMap();
_encoding2 = new WeakMap();
_generateId = new WeakSet();
generateId_fn = function() {
  return (0, import_human_id.humanId)({
    separator: "-",
    capitalize: false
  });
};

// src/tts/index.ts
var TTS = class extends Client {
  /**
   * Get a WebSocket client for streaming audio from the TTS API.
   *
   * @returns {WebSocket} A Cartesia WebSocket client.
   */
  websocket(options) {
    return new WebSocket(options, {
      apiKey: this.apiKey,
      baseUrl: this.baseUrl
    });
  }
};

// src/voices/index.ts
var Voices = class extends Client {
  list() {
    return __async(this, null, function* () {
      const response = yield this._fetch("/voices");
      return response.json();
    });
  }
  get(voiceId) {
    return __async(this, null, function* () {
      const response = yield this._fetch(`/voices/${voiceId}`);
      return response.json();
    });
  }
  create(voice) {
    return __async(this, null, function* () {
      const response = yield this._fetch("/voices", {
        method: "POST",
        body: JSON.stringify(voice)
      });
      return response.json();
    });
  }
  update(id, voice) {
    return __async(this, null, function* () {
      const response = yield this._fetch(`/voices/${id}`, {
        method: "PATCH",
        body: JSON.stringify(voice)
      });
      return response.json();
    });
  }
  clone(options) {
    return __async(this, null, function* () {
      if (options.mode === "clip") {
        const formData = new FormData();
        formData.append("clip", options.clip);
        if (options.enhance !== void 0) {
          formData.append("enhance", options.enhance.toString());
        }
        const response = yield this._fetch("/voices/clone/clip", {
          method: "POST",
          body: formData
        });
        return response.json();
      }
      throw new Error("Invalid mode for clone()");
    });
  }
  mix(options) {
    return __async(this, null, function* () {
      const response = yield this._fetch("/voices/mix", {
        method: "POST",
        body: JSON.stringify(options)
      });
      return response.json();
    });
  }
  localize(options) {
    return __async(this, null, function* () {
      const response = yield this._fetch("/voices/localize", {
        method: "POST",
        body: JSON.stringify(options)
      });
      return response.json();
    });
  }
};

// src/lib/index.ts
var Cartesia = class extends Client {
  constructor(options = {}) {
    super(options);
    this.tts = new TTS(options);
    this.voices = new Voices(options);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Cartesia
});
