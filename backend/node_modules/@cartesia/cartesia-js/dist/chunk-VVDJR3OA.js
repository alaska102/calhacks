import {
  __async,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-WIFMLPT5.js";

// src/tts/source.ts
import Emittery from "emittery";
var ENCODING_MAP = {
  pcm_f32le: { arrayType: Float32Array, bytesPerElement: 4 },
  pcm_s16le: { arrayType: Int16Array, bytesPerElement: 2 },
  pcm_alaw: { arrayType: Uint8Array, bytesPerElement: 1 },
  pcm_mulaw: { arrayType: Uint8Array, bytesPerElement: 1 }
};
var _emitter, _buffer, _readIndex, _writeIndex, _closed, _sampleRate, _encoding, _container, _createBuffer, createBuffer_fn;
var Source = class {
  /**
   * Create a new Source.
   *
   * @param options - Options for the Source.
   * @param options.sampleRate - The sample rate of the audio.
   */
  constructor({
    sampleRate,
    encoding,
    container
  }) {
    /**
     * Create a new buffer for the source.
     *
     * @param size - The size of the buffer to create.
     * @returns The new buffer as a TypedArray based on the encoding.
     */
    __privateAdd(this, _createBuffer);
    __privateAdd(this, _emitter, new Emittery());
    __privateAdd(this, _buffer, void 0);
    __privateAdd(this, _readIndex, 0);
    __privateAdd(this, _writeIndex, 0);
    __privateAdd(this, _closed, false);
    __privateAdd(this, _sampleRate, void 0);
    __privateAdd(this, _encoding, void 0);
    __privateAdd(this, _container, void 0);
    this.on = __privateGet(this, _emitter).on.bind(__privateGet(this, _emitter));
    this.once = __privateGet(this, _emitter).once.bind(__privateGet(this, _emitter));
    this.events = __privateGet(this, _emitter).events.bind(__privateGet(this, _emitter));
    this.off = __privateGet(this, _emitter).off.bind(__privateGet(this, _emitter));
    __privateSet(this, _sampleRate, sampleRate);
    __privateSet(this, _encoding, encoding);
    __privateSet(this, _container, container);
    __privateSet(this, _buffer, __privateMethod(this, _createBuffer, createBuffer_fn).call(this, 1024));
  }
  get sampleRate() {
    return __privateGet(this, _sampleRate);
  }
  get encoding() {
    return __privateGet(this, _encoding);
  }
  get container() {
    return __privateGet(this, _container);
  }
  /**
   * Append audio to the buffer.
   *
   * @param src The audio to append.
   */
  enqueue(src) {
    return __async(this, null, function* () {
      const requiredCapacity = __privateGet(this, _writeIndex) + src.length;
      if (requiredCapacity > __privateGet(this, _buffer).length) {
        let newCapacity = __privateGet(this, _buffer).length;
        while (newCapacity < requiredCapacity) {
          newCapacity *= 2;
        }
        const newBuffer = __privateMethod(this, _createBuffer, createBuffer_fn).call(this, newCapacity);
        newBuffer.set(__privateGet(this, _buffer));
        __privateSet(this, _buffer, newBuffer);
      }
      __privateGet(this, _buffer).set(src, __privateGet(this, _writeIndex));
      __privateSet(this, _writeIndex, __privateGet(this, _writeIndex) + src.length);
      yield __privateGet(this, _emitter).emit("enqueue");
    });
  }
  /**
   * Read audio from the buffer.
   *
   * @param dst The buffer to read the audio into.
   * @returns The number of samples read. If the source is closed, this will be
   * less than the length of the provided buffer.
   */
  read(dst) {
    return __async(this, null, function* () {
      const targetReadIndex = __privateGet(this, _readIndex) + dst.length;
      while (!__privateGet(this, _closed) && targetReadIndex > __privateGet(this, _writeIndex)) {
        yield __privateGet(this, _emitter).emit("wait");
        yield Promise.race([
          __privateGet(this, _emitter).once("enqueue"),
          __privateGet(this, _emitter).once("close")
        ]);
        yield __privateGet(this, _emitter).emit("read");
      }
      const read = Math.min(dst.length, __privateGet(this, _writeIndex) - __privateGet(this, _readIndex));
      dst.set(__privateGet(this, _buffer).subarray(__privateGet(this, _readIndex), __privateGet(this, _readIndex) + read));
      __privateSet(this, _readIndex, __privateGet(this, _readIndex) + read);
      return read;
    });
  }
  /**
   * Seek in the buffer.
   *
   * @param offset The offset to seek to.
   * @param whence The position to seek from.
   * @returns The new position in the buffer.
   * @throws {Error} If the seek is invalid.
   */
  seek(offset, whence) {
    return __async(this, null, function* () {
      let position = __privateGet(this, _readIndex);
      switch (whence) {
        case "start":
          position = offset;
          break;
        case "current":
          position += offset;
          break;
        case "end":
          position = __privateGet(this, _writeIndex) + offset;
          break;
        default:
          throw new Error(`Invalid seek mode: ${whence}`);
      }
      if (position < 0 || position > __privateGet(this, _writeIndex)) {
        throw new Error("Seek out of bounds");
      }
      __privateSet(this, _readIndex, position);
      return position;
    });
  }
  /**
   * Get the number of samples in a given duration.
   *
   * @param durationSecs The duration in seconds.
   * @returns The number of samples.
   */
  durationToSampleCount(durationSecs) {
    return Math.trunc(durationSecs * __privateGet(this, _sampleRate));
  }
  get buffer() {
    return __privateGet(this, _buffer);
  }
  get readIndex() {
    return __privateGet(this, _readIndex);
  }
  get writeIndex() {
    return __privateGet(this, _writeIndex);
  }
  /**
   * Close the source. This signals that no more audio will be enqueued.
   *
   * This will emit a "close" event.
   *
   * @returns A promise that resolves when the source is closed.
   */
  close() {
    return __async(this, null, function* () {
      __privateSet(this, _closed, true);
      yield __privateGet(this, _emitter).emit("close");
      __privateGet(this, _emitter).clearListeners();
    });
  }
};
_emitter = new WeakMap();
_buffer = new WeakMap();
_readIndex = new WeakMap();
_writeIndex = new WeakMap();
_closed = new WeakMap();
_sampleRate = new WeakMap();
_encoding = new WeakMap();
_container = new WeakMap();
_createBuffer = new WeakSet();
createBuffer_fn = function(size) {
  const { arrayType: ArrayType } = ENCODING_MAP[__privateGet(this, _encoding)];
  return new ArrayType(size);
};

export {
  ENCODING_MAP,
  Source
};
